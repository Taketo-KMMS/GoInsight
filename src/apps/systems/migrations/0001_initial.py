# Generated by Django 4.2 on 2023-04-28 09:13

import apps.systems.models
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django_extensions.db.fields
import re


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AdminGroup",
            fields=[],
            options={
                "verbose_name": "システム管理グループ",
                "verbose_name_plural": "システム管理グループ",
                "managed": False,
                "proxy": True,
            },
            bases=("auth.group",),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="AdminPermission",
            fields=[],
            options={
                "verbose_name": "システム権限",
                "verbose_name_plural": "システム権限",
                "managed": False,
                "proxy": True,
            },
            bases=("auth.permission",),
            managers=[
                ("objects", django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name="AdminUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "created_at",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="作成日"),
                ),
                (
                    "updated_at",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="更新日"),
                ),
                ("username", models.CharField(max_length=150, unique=True, verbose_name="ユーザー名")),
                (
                    "password",
                    models.CharField(
                        max_length=128,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^(?:(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)|(?=.*[A-Z])(?=.*[a-z])(?=.*[!-/:-@[-`{-~])|(?=.*[A-Z])(?=.*\\d)(?=.*[!-/:-@[-`{-~])|(?=.*[a-z])(?=.*\\d)(?=.*[!-/:-@[-`{-~]))[\\w!-/:-@[-`{-~]{12,}$"
                                ),
                                message="半角英大文字、半角英小文字、半角数字、半角記号のうち3種以上を組み合わせた12文字以上のパスワードを設定してください",
                            )
                        ],
                        verbose_name="password",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="有効")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "システム管理者",
                "verbose_name_plural": "システム管理者",
                "db_table": "admin_users",
            },
            managers=[
                ("objects", apps.systems.models.AdminManager()),
            ],
        ),
    ]
